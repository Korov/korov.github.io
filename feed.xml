<feed xmlns="http://www.w3.org/2005/Atom"> <id>https://korov.github.io/</id><title>Korov</title><subtitle>Korov's Blog</subtitle> <updated>2021-08-12T22:31:38+08:00</updated> <author> <name>Korov</name> <uri>https://korov.github.io/</uri> </author><link rel="self" type="application/atom+xml" href="https://korov.github.io/feed.xml"/><link rel="alternate" type="text/html" hreflang="zh-CN" href="https://korov.github.io/"/> <generator uri="https://jekyllrb.com/" version="4.2.0">Jekyll</generator> <rights> © 2021 Korov </rights> <icon>/assets/img/favicons/favicon.ico</icon> <logo>/assets/img/favicons/favicon-96x96.png</logo> <entry><title>Intellij IDEA import project from WSL2</title><link href="https://korov.github.io/posts/Intellij-IDEA-import-project-from-wsl/" rel="alternate" type="text/html" title="Intellij IDEA import project from WSL2" /><published>2021-08-12T21:36:02+08:00</published> <updated>2021-08-12T22:31:10+08:00</updated> <id>https://korov.github.io/posts/Intellij-IDEA-import-project-from-wsl/</id> <content src="https://korov.github.io/posts/Intellij-IDEA-import-project-from-wsl/" /> <author> <name>Korov</name> </author> <category term="idea" /> <category term="java" /> <category term="wsl2" /> <summary> # 背景 公司里的项目有自己的打包脚本，因为同事都是用的mac，所以用bash打包，但是我用的是Windows没办法打包，后来就想到用WSL2来打包，但是每次要打包的时候都要把最新的代码拷贝到WSL2中，然后把打包的结果复制回Windows，很麻烦。 后来发现新版本的IDEA可以打开WSL2中的项目，但是试了之后发现这速度太慢了，构建索引都要半小时左右，根本不可用，后来发现原因是因为Windows和WSL2互相访问文件极慢导致的，因此只要解决两个系统间的文件访问问题就可以了。 在WSL2中配置好开发环境 第一步安装好git,maven,jdk这三个必要的开发工具。 IDEA中配置jdk和maven 打开IDEA设置 SDKs 可以添加多个JDK，这样设置是因为用WSL2自己的jdk编译项目，不会产生跨系统的文件访问 设置maven 这里的Maven hom... </summary> </entry> <entry><title>ECJ vs javac</title><link href="https://korov.github.io/posts/ECJ-vs-javac/" rel="alternate" type="text/html" title="ECJ vs javac" /><published>2021-07-23T14:04:02+08:00</published> <updated>2021-07-23T14:04:02+08:00</updated> <id>https://korov.github.io/posts/ECJ-vs-javac/</id> <content src="https://korov.github.io/posts/ECJ-vs-javac/" /> <author> <name>Korov</name> </author> <category term="java" /> <summary> 这是Eclipse基金会推出的一款Java编译器，相比于早期Java自带的编译器其有以下三个有点： 支持多线程编译 支持增量编译 编译的过程中遇到错误也不会停止编译，而是会把所有编译中遇到的错误都展示出来 会了解这个的原因是当时入职了一家公司，那家公司全部员工用的都是Eclipse而我比较喜欢Intellij，但是有一次我写完代码准备跑一下测试一下，傻眼了我从当天晚上编译到第二天早点还没编译好整个项目，而其他用Eclipse的同事写完立马就能测试了，不对劲呀，为什么，打开任务管理器一看一个线程在那玩命的编译，其他线程动都不动一下，看下其他同事的，人家都是所有线程一起编译，编译的贼快。 这肯定不能忍啊，立马回来一顿搜索，原来ECJ是Eclipse默认的编译器，所以当时的Eclipse编译速度很快。而Intellij默... </summary> </entry> <entry><title>安装Oh My ZSH</title><link href="https://korov.github.io/posts/install-ohmyzsh/" rel="alternate" type="text/html" title="安装Oh My ZSH" /><published>2021-06-26T15:47:02+08:00</published> <updated>2021-06-26T15:47:02+08:00</updated> <id>https://korov.github.io/posts/install-ohmyzsh/</id> <content src="https://korov.github.io/posts/install-ohmyzsh/" /> <author> <name>Korov</name> </author> <category term="zsh" /> <summary> 安装Oh My ZSH 按照官方说明安装不成功 $ sh -c "$(wget https://raw.github.com/ohmyzsh/ohmyzsh/master/tools/install.sh -O -)" Connecting to raw.github.com (185.199.108.133:443) Connecting to raw.githubusercontent.com (0.0.0.0:443) wget: can't connect to remote host (0.0.0.0): Connection refused 我们只能按照另一套方法来安装，浏览器访问安装脚本，下面复制了一份 #!/bin/sh # # This script should be run via curl: # sh -c "$(curl -fsSL https... </summary> </entry> <entry><title>使用Jekyll部署Github Pages</title><link href="https://korov.github.io/posts/github-pages-jekyll/" rel="alternate" type="text/html" title="使用Jekyll部署Github Pages" /><published>2021-06-25T19:18:02+08:00</published> <updated>2021-06-26T01:16:07+08:00</updated> <id>https://korov.github.io/posts/github-pages-jekyll/</id> <content src="https://korov.github.io/posts/github-pages-jekyll/" /> <author> <name>Korov</name> </author> <category term="jekyll" /> <category term="github pages" /> <summary> 安装Ruby 推荐使用Ruby Version Manager(RVM)管理Ruby # 安装GPG keys gpg2 --keyserver hkp://pool.sks-keyservers.net --recv-keys 409B6B1796C275462A1703113804BB82D39DC0E3 7D2BAF1CF37B13E2069D6956105BD0E739499BDB # 安装RVM curl -sSL https://get.rvm.io | bash -s stable # 安装Ruby，推荐安装2.7版本，试了最新的3.0版本对Jekyll支持不好，启动不了 rvm install 2.7 # 使用Ruby 2.7 rvm use 2.7 使用RVM的时候需要将Terminal的Command选项卡中的Run command as a login ... </summary> </entry> </feed>
